


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to ComPUTing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; GET, PUT and PUTs subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000         
   14 00000000 0000002A 
                       SPACES  EQU              42
   15 00000000 00000006 
                       ROWS    EQU              6
   16 00000000 00000007 
                       COLUMNS EQU              7
   17 00000000         
   18 00000000                 AREA             globals, DATA, READWRITE
   19 00000000         
   20 00000000         ;
   21 00000000         ; copy the test data into RAM
   22 00000000         ;
   23 00000000         
   24 00000000         
   25 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   26 00000007 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   27 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   28 00000015 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   29 0000001C 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   30 00000023 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   31 0000002A         
   32 0000002A 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 SORTED  SPACE            SPACES      ; N words (1 byte e
                                                            ach)
   33 00000054         
   34 00000054         
   35 00000054                 AREA             RESET, CODE, READONLY
   36 00000000                 ENTRY
   37 00000000         
   38 00000000         
   39 00000000         
   40 00000000         ; initialise SP to top of RAM
   41 00000000 E59FD3F4        LDR              R13, =0x40010000 ; initialse SP
                                                            
   42 00000004         
   43 00000004         ; initialise the console
   44 00000004 EB0000A6        BL               inithw
   45 00000008         
   46 00000008         ;
   47 00000008         ; Main
   48 00000008         ;
   49 00000008         
   50 00000008 E59F03F0 
                       START   LDR              R0, =str_go
   51 0000000C EB0000BD        BL               PUTS
   52 00000010         
   53 00000010 E59F03EC        LDR              R0, =str_newl
   54 00000014 EB0000BB        BL               PUTS
   55 00000018         
   56 00000018 EB000014        BL               initializeBoard
   57 0000001C         
   58 0000001C E3A04000        MOV              R4, #0      ; start with red's 
                                                            turn 
   59 00000020 E3A05000        MOV              R5, #0      ; boolean win = fal
                                                            se
   60 00000024         
   61 00000024 EB00001D 
                       LOOP0   BL               drawBoard
   62 00000028         
   63 00000028 E3550001        CMP              R5, #1      ; win?
   64 0000002C 0A000006        BEQ              WIN2        ; if so, end game a
                                                            nd determine winner
                                                            
   65 00000030         
   66 00000030 E1A01004        MOV              R1, R4      ; restore turn
   67 00000034 EB000033        BL               makeMove
   68 00000038 E1A04001        MOV              R4, R1      ; back up turn
   69 0000003C         
   70 0000003C EB000057        BL               checkForWin
   71 00000040 E1A06000        MOV              R6, R0      ; back up address o
                                                            f input piece
   72 00000044 E1A05001        MOV              R5, R1      ; back up value of 
                                                            boolean win
   73 00000048         
   74 00000048 EAFFFFF5        B                LOOP0       ; repeat



ARM Macro Assembler    Page 3 


   75 0000004C         
   76 0000004C E5D65000 
                       WIN2    LDRB             R5, [R6]    ; load the value of
                                                             the winning piece
   77 00000050 E3550059        CMP              R5, #0x59   ; is this piece 'Y'
                                                            ?
   78 00000054 0A000002        BEQ              YELLOWWIN   ; if so, yellow has
                                                             won
   79 00000058 E59F03A8        LDR              R0, =str_red_win
   80 0000005C EB0000A9        BL               PUTS        ; print "Red wins!"
                                                            
   81 00000060 EA000001        B                STOP        ; end
   82 00000064         
   83 00000064         YELLOWWIN
   84 00000064 E59F03A0        LDR              R0, =str_yellow_win
   85 00000068 EB0000A6        BL               PUTS        ; print "Yellow win
                                                            s!"
   86 0000006C         
   87 0000006C EAFFFFFE 
                       STOP    B                STOP
   88 00000070         
   89 00000070         
   90 00000070         ;
   91 00000070         ; Subroutines
   92 00000070         ;
   93 00000070         
   94 00000070         ; initializeBoard subroutine
   95 00000070         ; Void leaf function which initializes the board by copy
                       ing values defined in flash ROM by the DCB statements at
                        the beginning of the program.
   96 00000070         ; to an area in RAM, converting each to the ASCII charac
                       ter '0' as it does so. It takes no parameters.
   97 00000070         
   98 00000070         initializeBoard
   99 00000070         
  100 00000070 E92D40F0        PUSH             {R4-R7, LR}
  101 00000074         
  102 00000074 E59F4394        LDR              R4, =SORTED
  103 00000078 E59F5394        LDR              R5, =BOARD
  104 0000007C E3A06000        LDR              R6, =0
  105 00000080 E356002A 
                       iB0     CMP              R6, #SPACES
  106 00000084 2A000004        BHS              iB1
  107 00000088 E7D57006        LDRB             R7, [R5, R6] ; load byte
  108 0000008C E2877030        ADD              R7, #0x30   ; convert to ASCII
  109 00000090 E7C47006        STRB             R7, [R4, R6] ; store character
  110 00000094 E2866001        ADD              R6, R6, #1  ; increment by 1
  111 00000098 EAFFFFF8        B                iB0
  112 0000009C         iB1
  113 0000009C E8BD80F0        POP              {R4-R7, PC}
  114 000000A0         
  115 000000A0         ; drawBoard subroutine
  116 000000A0         ; Void function which displays the board by reading the 
                       contents of RAM.
  117 000000A0         ; It takes no parameters.
  118 000000A0         
  119 000000A0         drawBoard
  120 000000A0         
  121 000000A0 E92D40F0        PUSH             {R4-R7, LR}



ARM Macro Assembler    Page 4 


  122 000000A4         
  123 000000A4 E59F036C        LDR              R0, =str_header
  124 000000A8 EB000096        BL               PUTS
  125 000000AC         
  126 000000AC E59F435C        LDR              R4, =SORTED ; starting address 
                                                            of board data
  127 000000B0 E3A05000        MOV              R5, #0      ; row counter to 6
  128 000000B4 E3A06000        MOV              R6, #0      ; column counter to
                                                             7
  129 000000B8         
  130 000000B8 E3550006 
                       ROWSTRT CMP              R5, #ROWS
  131 000000BC 2A000010        BHS              drawBoard0
  132 000000C0 E1A00005        MOV              R0, R5
  133 000000C4 E2800031        ADD              R0, R0, #0x31 ; + 1
  134 000000C8 EB00006B        BL               PUTwithSpace
  135 000000CC         
  136 000000CC         drawBoard1
  137 000000CC E3560007        CMP              R6, #COLUMNS
  138 000000D0 2A000006        BHS              ROWEND
  139 000000D4 E3A07007        MOV              R7, #7      ; size of rows
  140 000000D8 E0070795        MUL              R7, R5, R7  ; row number by row
                                                             size
  141 000000DC E0877006        ADD              R7, R7, R6  ; plus column numbe
                                                            r
  142 000000E0 E7D40007        LDRB             R0, [R4, R7]
  143 000000E4 EB000064        BL               PUTwithSpace
  144 000000E8 E2866001        ADD              R6, R6, #1
  145 000000EC EAFFFFF6        B                drawBoard1
  146 000000F0         
  147 000000F0         ROWEND
  148 000000F0         
  149 000000F0 E2855001        ADD              R5, R5, #1
  150 000000F4 E3A06000        MOV              R6, #0
  151 000000F8         
  152 000000F8 E59F0304        LDR              R0, =str_newl
  153 000000FC EB000081        BL               PUTS
  154 00000100         
  155 00000100 EAFFFFEC        B                ROWSTRT
  156 00000104         
  157 00000104         drawBoard0
  158 00000104         
  159 00000104 E8BD80F0        POP              {R4-R7, PC}
  160 00000108         
  161 00000108         
  162 00000108         ; makeMove subroutine
  163 00000108         ; Subroutine which allows the player to place a piece in
                       to the board. 
  164 00000108         ; Parameters:
  165 00000108         ;  R1: boolean turn,  false - red, true - yellow
  166 00000108         ; Returns:
  167 00000108         ; R0: address in memory of placed piece
  168 00000108         ; R1: boolean turn
  169 00000108         
  170 00000108         
  171 00000108         makeMove
  172 00000108         
  173 00000108 E92D40F0        PUSH             {R4-R7, LR}
  174 0000010C         



ARM Macro Assembler    Page 5 


  175 0000010C E3510001        CMP              R1, #1      ; is it yellow's tu
                                                            rn?
  176 00000110 0A000004        BEQ              makeMove0
  177 00000114         
  178 00000114 E3A07001        MOV              R7, #1      ; make it yellow's 
                                                            turn next
  179 00000118 E59F02FC        LDR              R0, =str_red_turn
  180 0000011C EB000079        BL               PUTS
  181 00000120 E3A05052        MOV              R5, #0x52   ; piece is 'R'
  182 00000124 EA000003        B                makeMove1
  183 00000128         
  184 00000128         makeMove0
  185 00000128         
  186 00000128 E3A07000        MOV              R7, #0      ; make it red's tur
                                                            n next
  187 0000012C E59F02EC        LDR              R0, =str_yellow_turn
  188 00000130 EB000074        BL               PUTS
  189 00000134 E3A05059        MOV              R5, #0x59   ; piece is 'Y'
  190 00000138         
  191 00000138         makeMove1
  192 00000138 EB000060        BL               GET         ; get character
  193 0000013C EB000066        BL               PUT         ; put character
  194 00000140 E3500071        CMP              R0, #0x71   ; is character q?
  195 00000144 0AFFFFAF        BEQ              START       ; if so, restart
  196 00000148 E3500031        CMP              R0, #0x31   ; < 0x31 / '1'?
  197 0000014C 3AFFFFF9        BLO              makeMove1
  198 00000150 E3500037        CMP              R0, #0x37   ; > 0x37 / '7'?
  199 00000154 8AFFFFF7        BHI              makeMove1
  200 00000158 E2400031        SUB              R0, R0, #0x31 ; convert to colu
                                                            mn to int, -1 becau
                                                            se 0 is the first c
                                                            olumn
  201 0000015C         
  202 0000015C E3A03005        MOV              R3, #5      ; row number
  203 00000160 E3A01007        MOV              R1, #7      ; size of rows
  204 00000164 E0020193        MUL              R2, R3, R1  ; row number by row
                                                             size
  205 00000168 E0822000        ADD              R2, R2, R0  ; plus column numbe
                                                            r
  206 0000016C         
  207 0000016C E59F429C        LDR              R4, =SORTED ; starting address 
                                                            of board data
  208 00000170         
  209 00000170         makeMove3
  210 00000170 E0843002        ADD              R3, R4, R2
  211 00000174 E35301A9        CMP              R3, #0x4000002A ; is address wi
                                                            thin range?
  212 00000178 3AFFFFEE        BLO              makeMove1   ; if not, make play
                                                            er choose another c
                                                            olumn
  213 0000017C E7D46002        LDRB             R6, [R4, R2]
  214 00000180 E3560030        CMP              R6, #0x30
  215 00000184 0A000001        BEQ              makeMove2
  216 00000188 E2422007        SUB              R2, R2, #7  ; previous row
  217 0000018C EAFFFFF7        B                makeMove3
  218 00000190         
  219 00000190         makeMove2
  220 00000190         
  221 00000190         



ARM Macro Assembler    Page 6 


  222 00000190 E7C45002        STRB             R5, [R4, R2] ; finally store le
                                                            tter
  223 00000194         
  224 00000194 E1A01007        MOV              R1, R7      ; return turn
  225 00000198         
  226 00000198 E0840002        ADD              R0, R4, R2  ; return address
  227 0000019C         
  228 0000019C E8BD80F0        POP              {R4-R7, PC}
  229 000001A0         
  230 000001A0         
  231 000001A0         ; checkForWin subroutine
  232 000001A0         ; Void leaf function which sorts all the elements of a o
                       ne-dimensional array of word-sized integers
  233 000001A0         ; Parameters:
  234 000001A0         ;  R0: the address of the newest disc added
  235 000001A0         ; Returns:
  236 000001A0         ;  R0: the address of the newest disc added 
  237 000001A0         ; R1: boolean , 1 for win
  238 000001A0         
  239 000001A0         checkForWin
  240 000001A0         
  241 000001A0 E92D41F0        PUSH             {R4-R8, LR}
  242 000001A4         
  243 000001A4 E1A08000        MOV              R8, R0      ; backup address   
                                                             
  244 000001A8 E3A07001        MOV              R7, #1      ; counter
  245 000001AC         
  246 000001AC E5D05000        LDRB             R5, [R0]    ; check vertically
  247 000001B0 E3570004 
                       chkWin0 CMP              R7, #4      ; is count 4?
  248 000001B4 2A00002D        BHS              WIN         ; if so, then the g
                                                            ame is won
  249 000001B8 E5F06007        LDRB             R6, [R0, #7]! ; next row, only 
                                                            need check downward
                                                            s
  250 000001BC E1550006        CMP              R5, R6      ; is R5 == R6?
  251 000001C0 1A000001        BNE              CHECKHORIZONTAL ; if not, then 
                                                            no vertical win, ch
                                                            eck horizontally.
  252 000001C4 E2877001        ADD              R7, R7, #1
  253 000001C8 EAFFFFF8        B                chkWin0
  254 000001CC         
  255 000001CC         CHECKHORIZONTAL
  256 000001CC         
  257 000001CC E1A00008        MOV              R0, R8      ; reset address
  258 000001D0         
  259 000001D0 E5706001 
                       chkWin1 LDRB             R6, [R0, #-1]! ; check if leftm
                                                            ost red or yellow d
                                                            isc
  260 000001D4 E1560005        CMP              R6, R5
  261 000001D8 1A000000        BNE              DONE1
  262 000001DC EAFFFFFB        B                chkWin1
  263 000001E0         
  264 000001E0         DONE1
  265 000001E0         
  266 000001E0 E3A07000        MOV              R7, #0      ; counter
  267 000001E4         
  268 000001E4 E3570004 



ARM Macro Assembler    Page 7 


                       chkWin2 CMP              R7, #4      ; is count four
  269 000001E8 2A000020        BHS              WIN
  270 000001EC E5F06001        LDRB             R6, [R0, #1]! ; next column
  271 000001F0 E1550006        CMP              R5, R6
  272 000001F4 1A000001        BNE              CHECKDIAGONAL
  273 000001F8 E2877001        ADD              R7, R7, #1
  274 000001FC EAFFFFF8        B                chkWin2
  275 00000200         
  276 00000200         CHECKDIAGONAL
  277 00000200         
  278 00000200 E1A00008        MOV              R0, R8      ; reset address
  279 00000204         
  280 00000204 E5706008 
                       chkWin3 LDRB             R6, [R0, #-8]! ; check if diago
                                                            nal space (up and l
                                                            eft) is a red or ye
                                                            llow disc
  281 00000208 E1560005        CMP              R6, R5
  282 0000020C 1A000000        BNE              DONE2
  283 00000210 EAFFFFFB        B                chkWin3
  284 00000214         
  285 00000214         DONE2
  286 00000214         
  287 00000214 E3A07000        MOV              R7, #0      ; counter
  288 00000218         
  289 00000218 E3570004 
                       chkWin4 CMP              R7, #4      ; is count 4?
  290 0000021C 2A000013        BHS              WIN
  291 00000220 E5F06008        LDRB             R6, [R0, #8]! ; next column
  292 00000224 E1550006        CMP              R5, R6
  293 00000228 1A000001        BNE              CHECKDIAGONAL2
  294 0000022C E2877001        ADD              R7, R7, #1
  295 00000230 EAFFFFF8        B                chkWin4
  296 00000234         
  297 00000234         CHECKDIAGONAL2
  298 00000234         
  299 00000234 E1A00008        MOV              R0, R8      ; reset address
  300 00000238         
  301 00000238 E5706006 
                       chkWin5 LDRB             R6, [R0, #-6]! ; check if diago
                                                            nal space (up and r
                                                            ight) is a red or y
                                                            ellow disc
  302 0000023C E1560005        CMP              R6, R5
  303 00000240 1A000000        BNE              DONE3
  304 00000244 EAFFFFFB        B                chkWin5
  305 00000248         
  306 00000248         DONE3
  307 00000248         
  308 00000248 E3A07000        MOV              R7, #0      ; counter
  309 0000024C         
  310 0000024C E3570004 
                       chkWin6 CMP              R7, #4      ; is count 4?
  311 00000250 2A000006        BHS              WIN
  312 00000254 E5F06006        LDRB             R6, [R0, #6]! ; next column
  313 00000258 E1550006        CMP              R5, R6
  314 0000025C 1A000001        BNE              NOWIN
  315 00000260 E2877001        ADD              R7, R7, #1
  316 00000264 EAFFFFF8        B                chkWin6



ARM Macro Assembler    Page 8 


  317 00000268         
  318 00000268         NOWIN
  319 00000268         
  320 00000268 E3A01000        MOV              R1, #0      ; win = false
  321 0000026C         
  322 0000026C EA000000        B                END01       ; end subroutine
  323 00000270         
  324 00000270 E3A01001 
                       WIN     MOV              R1, #1      ; win = true
  325 00000274         
  326 00000274 E1A00008 
                       END01   MOV              R0, R8      ; reset address
  327 00000278 E8BD81F0        POP              {R4-R8, PC}
  328 0000027C         
  329 0000027C         
  330 0000027C         ; PUTwithSpace subroutine
  331 0000027C         ; Void function which prints out the input charcater to 
                       the console with a space
  332 0000027C         ; Parameters:
  333 0000027C         ;  R0: the input character 
  334 0000027C         
  335 0000027C         PUTwithSpace
  336 0000027C         
  337 0000027C E52DE004        PUSH             {LR}
  338 00000280         
  339 00000280 E59F11A0        LDR              R1, =0x400000DA
  340 00000284 E5C10000        STRB             R0, [R1]
  341 00000288 E3A00020        MOV              R0, #0x20   ; space
  342 0000028C E5C10001        STRB             R0, [R1, #1]
  343 00000290 E3A00000        MOV              R0, #0x0    ; null
  344 00000294 E5C10002        STRB             R0, [R1, #2]
  345 00000298 E1A00001        MOV              R0, R1
  346 0000029C         
  347 0000029C EB000019        BL               PUTS
  348 000002A0         
  349 000002A0 E49DF004        POP              {PC}
  350 000002A4         
  351 000002A4         ;
  352 000002A4         ; inithw subroutines
  353 000002A4         ; performs hardware initialisation, including console
  354 000002A4         ; parameters:
  355 000002A4         ; none
  356 000002A4         ; return value:
  357 000002A4         ; none
  358 000002A4         ;
  359 000002A4         inithw
  360 000002A4 E59F0180        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  361 000002A8 E3A01050        MOV              R1, #0x50
  362 000002AC E5C01000        STRB             R1, [R0]
  363 000002B0 E59F0178        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  364 000002B4 E3A01002        LDR              R1, =0x02
  365 000002B8 E5C01000        STRB             R1, [R0]
  366 000002BC E12FFF1E        BX               LR
  367 000002C0         
  368 000002C0         ;
  369 000002C0         ; GET subroutine
  370 000002C0         ; returns the ASCII code of the next character read on t



ARM Macro Assembler    Page 9 


                       he console
  371 000002C0         ; parameters:
  372 000002C0         ; none
  373 000002C0         ; return value:
  374 000002C0         ; R0 - ASCII code of the character read on the console (
                       byte)
  375 000002C0         ;
  376 000002C0 E59F116C 
                       GET     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  377 000002C4 E5910000 
                       GET0    LDR              R0, [R1]    ; wait until
  378 000002C8 E2100001        ANDS             R0, #0x01   ; receiver data
  379 000002CC 0AFFFFFC        BEQ              GET0        ; ready
  380 000002D0 E59F1160        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  381 000002D4 E5D10000        LDRB             R0, [R1]    ; GET received data
                                                            
  382 000002D8 E12FFF1E        BX               LR          ; return
  383 000002DC         
  384 000002DC         ;
  385 000002DC         ; PUT subroutine
  386 000002DC         ; writes a character to the console
  387 000002DC         ; parameters:
  388 000002DC         ; R0 - ASCII code of the character to write
  389 000002DC         ; return value:
  390 000002DC         ; none
  391 000002DC         ;
  392 000002DC E59F1150 
                       PUT     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  393 000002E0 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  394 000002E4 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  395 000002E8 0AFFFFFB        BEQ              PUT         ; empty
  396 000002EC E59F1144        LDR              R1, =U0THR  ; R1 -> U0THR
  397 000002F0 E5C10000        STRB             R0, [R1]    ; outPUT charcter
  398 000002F4 E59F1138 
                       PUT0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  399 000002F8 E5D11000        LDRB             R1, [R1]    ; wait until
  400 000002FC E2111040        ANDS             R1, R1, #0x40 ; transmitter
  401 00000300 0AFFFFFB        BEQ              PUT0        ; empty (data flush
                                                            ed)
  402 00000304 E12FFF1E        BX               LR          ; return
  403 00000308         
  404 00000308         ;
  405 00000308         ; PUTS subroutine
  406 00000308         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  407 00000308         ; parameters:
  408 00000308         ; R0 - address of NULL-terminated ASCII string
  409 00000308         ; return value:
  410 00000308         ; R0 - ASCII code of the character read on the console (
                       byte)
  411 00000308         ;
  412 00000308 E92D4010 
                       PUTS    STMFD            SP!, {R4, LR} ; push R4 and LR



ARM Macro Assembler    Page 10 


  413 0000030C E1A04000        MOV              R4, R0      ; copy R0
  414 00000310 E4D40001 
                       PUTS0   LDRB             R0, [R4], #1 ; GET character + 
                                                            increment R4
  415 00000314 E3500000        CMP              R0, #0      ; 0?
  416 00000318 0A000001        BEQ              PUTS1       ; return
  417 0000031C EBFFFFEE        BL               PUT         ; PUT character
  418 00000320 EAFFFFFA        B                PUTS0       ; next character
  419 00000324 E8BD8010 
                       PUTS1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  420 00000328         
  421 00000328         
  422 00000328         ;
  423 00000328         ; hint! Put the strings used by your program here ...
  424 00000328         ;
  425 00000328         
  426 00000328         str_go
  427 00000328 4C 65 74 
              27 73 20 
              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              20 34 21 
              21 0A 0D 
              00               DCB              "Let's play Connect 4!!", 0xA, 
0xD, 0x0
  428 00000341         
  429 00000341         str_header
  430 00000341 0A 0D 20 
              20 31 20 
              32 20 33 
              20 34 20 
              35 20 36 
              20 37 0A 
              0D 00            DCB              0xA, 0xD, 0x20, 0x20, "1 2 3 4 
5 6 7", 0xA, 0xD, 0x0
  431 00000355         
  432 00000355         str_red_turn
  433 00000355 52 45 44 
              3A 20 63 
              68 6F 6F 
              73 65 20 
              61 20 63 
              6F 6C 75 
              6D 6E 20 
              66 6F 72 
              20 79 6F 
              75 72 20 
              6E 65 78 
              74 20 6D 
              6F 76 65 
              20 28 31 
              2D 37 2C 
              20 71 20 
              74 6F 20 
              72 65 73 
              74 61 72 
              74 29 3A 



ARM Macro Assembler    Page 11 


              20 0A 0D 
              00               DCB              "RED: choose a column for your 
next move (1-7, q to restart): ", 0xA, 0xD, 0x0
  434 00000395         
  435 00000395         str_yellow_turn
  436 00000395 59 45 4C 
              4C 4F 57 
              3A 20 63 
              68 6F 6F 
              73 65 20 
              61 20 63 
              6F 6C 75 
              6D 6E 20 
              66 6F 72 
              20 79 6F 
              75 72 20 
              6E 65 78 
              74 20 6D 
              6F 76 65 
              20 28 31 
              2D 37 2C 
              20 71 20 
              74 6F 20 
              72 65 73 
              74 61 72 
              74 29 3A 
              20 0A 0D 
              00               DCB              "YELLOW: choose a column for yo
ur next move (1-7, q to restart): ", 0xA, 0xD, 0x0
  437 000003D8         
  438 000003D8         str_red_win
  439 000003D8 0A 0D 52 
              65 64 20 
              77 69 6E 
              73 21 0A 
              0D 00            DCB              0xA, 0xD, "Red wins!", 0xA, 0xD
, 0x0
  440 000003E6         
  441 000003E6         str_yellow_win
  442 000003E6 0A 0D 59 
              65 6C 6C 
              6F 77 20 
              77 69 6E 
              73 21 0A 
              0D 00            DCB              0xA, 0xD, "Yellow wins!", 0xA, 
0xD, 0x0
  443 000003F7         
  444 000003F7         
  445 000003F7         str_newl
  446 000003F7 0A 0D 00        DCB              0xA, 0xD, 0x0
  447 000003FA         
  448 000003FA         
  449 000003FA         
  450 000003FA                 END
              00 00 40010000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 12 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400000DA 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 516" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 25 in file connect4.s
   Uses
      At line 103 in file connect4.s
Comment: BOARD used once
SORTED 0000002A

Symbol: SORTED
   Definitions
      At line 32 in file connect4.s
   Uses
      At line 102 in file connect4.s
      At line 126 in file connect4.s
      At line 207 in file connect4.s

globals 00000000

Symbol: globals
   Definitions
      At line 18 in file connect4.s
   Uses
      None
Comment: globals unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CHECKDIAGONAL 00000200

Symbol: CHECKDIAGONAL
   Definitions
      At line 276 in file connect4.s
   Uses
      At line 272 in file connect4.s
Comment: CHECKDIAGONAL used once
CHECKDIAGONAL2 00000234

Symbol: CHECKDIAGONAL2
   Definitions
      At line 297 in file connect4.s
   Uses
      At line 293 in file connect4.s
Comment: CHECKDIAGONAL2 used once
CHECKHORIZONTAL 000001CC

Symbol: CHECKHORIZONTAL
   Definitions
      At line 255 in file connect4.s
   Uses
      At line 251 in file connect4.s
Comment: CHECKHORIZONTAL used once
DONE1 000001E0

Symbol: DONE1
   Definitions
      At line 264 in file connect4.s
   Uses
      At line 261 in file connect4.s
Comment: DONE1 used once
DONE2 00000214

Symbol: DONE2
   Definitions
      At line 285 in file connect4.s
   Uses
      At line 282 in file connect4.s
Comment: DONE2 used once
DONE3 00000248

Symbol: DONE3
   Definitions
      At line 306 in file connect4.s
   Uses
      At line 303 in file connect4.s
Comment: DONE3 used once
END01 00000274

Symbol: END01
   Definitions
      At line 326 in file connect4.s
   Uses
      At line 322 in file connect4.s
Comment: END01 used once
GET 000002C0

Symbol: GET



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 376 in file connect4.s
   Uses
      At line 192 in file connect4.s
Comment: GET used once
GET0 000002C4

Symbol: GET0
   Definitions
      At line 377 in file connect4.s
   Uses
      At line 379 in file connect4.s
Comment: GET0 used once
LOOP0 00000024

Symbol: LOOP0
   Definitions
      At line 61 in file connect4.s
   Uses
      At line 74 in file connect4.s
Comment: LOOP0 used once
NOWIN 00000268

Symbol: NOWIN
   Definitions
      At line 318 in file connect4.s
   Uses
      At line 314 in file connect4.s
Comment: NOWIN used once
PUT 000002DC

Symbol: PUT
   Definitions
      At line 392 in file connect4.s
   Uses
      At line 193 in file connect4.s
      At line 395 in file connect4.s
      At line 417 in file connect4.s

PUT0 000002F4

Symbol: PUT0
   Definitions
      At line 398 in file connect4.s
   Uses
      At line 401 in file connect4.s
Comment: PUT0 used once
PUTS 00000308

Symbol: PUTS
   Definitions
      At line 412 in file connect4.s
   Uses
      At line 51 in file connect4.s
      At line 54 in file connect4.s
      At line 80 in file connect4.s
      At line 85 in file connect4.s
      At line 124 in file connect4.s
      At line 153 in file connect4.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 180 in file connect4.s
      At line 188 in file connect4.s
      At line 347 in file connect4.s

PUTS0 00000310

Symbol: PUTS0
   Definitions
      At line 414 in file connect4.s
   Uses
      At line 418 in file connect4.s
Comment: PUTS0 used once
PUTS1 00000324

Symbol: PUTS1
   Definitions
      At line 419 in file connect4.s
   Uses
      At line 416 in file connect4.s
Comment: PUTS1 used once
PUTwithSpace 0000027C

Symbol: PUTwithSpace
   Definitions
      At line 335 in file connect4.s
   Uses
      At line 134 in file connect4.s
      At line 143 in file connect4.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 35 in file connect4.s
   Uses
      None
Comment: RESET unused
ROWEND 000000F0

Symbol: ROWEND
   Definitions
      At line 147 in file connect4.s
   Uses
      At line 138 in file connect4.s
Comment: ROWEND used once
ROWSTRT 000000B8

Symbol: ROWSTRT
   Definitions
      At line 130 in file connect4.s
   Uses
      At line 155 in file connect4.s
Comment: ROWSTRT used once
START 00000008

Symbol: START
   Definitions
      At line 50 in file connect4.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 195 in file connect4.s
Comment: START used once
STOP 0000006C

Symbol: STOP
   Definitions
      At line 87 in file connect4.s
   Uses
      At line 81 in file connect4.s
      At line 87 in file connect4.s

WIN 00000270

Symbol: WIN
   Definitions
      At line 324 in file connect4.s
   Uses
      At line 248 in file connect4.s
      At line 269 in file connect4.s
      At line 290 in file connect4.s
      At line 311 in file connect4.s

WIN2 0000004C

Symbol: WIN2
   Definitions
      At line 76 in file connect4.s
   Uses
      At line 64 in file connect4.s
Comment: WIN2 used once
YELLOWWIN 00000064

Symbol: YELLOWWIN
   Definitions
      At line 83 in file connect4.s
   Uses
      At line 78 in file connect4.s
Comment: YELLOWWIN used once
checkForWin 000001A0

Symbol: checkForWin
   Definitions
      At line 239 in file connect4.s
   Uses
      At line 70 in file connect4.s
Comment: checkForWin used once
chkWin0 000001B0

Symbol: chkWin0
   Definitions
      At line 247 in file connect4.s
   Uses
      At line 253 in file connect4.s
Comment: chkWin0 used once
chkWin1 000001D0

Symbol: chkWin1
   Definitions
      At line 259 in file connect4.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 262 in file connect4.s
Comment: chkWin1 used once
chkWin2 000001E4

Symbol: chkWin2
   Definitions
      At line 268 in file connect4.s
   Uses
      At line 274 in file connect4.s
Comment: chkWin2 used once
chkWin3 00000204

Symbol: chkWin3
   Definitions
      At line 280 in file connect4.s
   Uses
      At line 283 in file connect4.s
Comment: chkWin3 used once
chkWin4 00000218

Symbol: chkWin4
   Definitions
      At line 289 in file connect4.s
   Uses
      At line 295 in file connect4.s
Comment: chkWin4 used once
chkWin5 00000238

Symbol: chkWin5
   Definitions
      At line 301 in file connect4.s
   Uses
      At line 304 in file connect4.s
Comment: chkWin5 used once
chkWin6 0000024C

Symbol: chkWin6
   Definitions
      At line 310 in file connect4.s
   Uses
      At line 316 in file connect4.s
Comment: chkWin6 used once
drawBoard 000000A0

Symbol: drawBoard
   Definitions
      At line 119 in file connect4.s
   Uses
      At line 61 in file connect4.s
Comment: drawBoard used once
drawBoard0 00000104

Symbol: drawBoard0
   Definitions
      At line 157 in file connect4.s
   Uses
      At line 131 in file connect4.s
Comment: drawBoard0 used once



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

drawBoard1 000000CC

Symbol: drawBoard1
   Definitions
      At line 136 in file connect4.s
   Uses
      At line 145 in file connect4.s
Comment: drawBoard1 used once
iB0 00000080

Symbol: iB0
   Definitions
      At line 105 in file connect4.s
   Uses
      At line 111 in file connect4.s
Comment: iB0 used once
iB1 0000009C

Symbol: iB1
   Definitions
      At line 112 in file connect4.s
   Uses
      At line 106 in file connect4.s
Comment: iB1 used once
inithw 000002A4

Symbol: inithw
   Definitions
      At line 359 in file connect4.s
   Uses
      At line 44 in file connect4.s
Comment: inithw used once
initializeBoard 00000070

Symbol: initializeBoard
   Definitions
      At line 98 in file connect4.s
   Uses
      At line 56 in file connect4.s
Comment: initializeBoard used once
makeMove 00000108

Symbol: makeMove
   Definitions
      At line 171 in file connect4.s
   Uses
      At line 67 in file connect4.s
Comment: makeMove used once
makeMove0 00000128

Symbol: makeMove0
   Definitions
      At line 184 in file connect4.s
   Uses
      At line 176 in file connect4.s
Comment: makeMove0 used once
makeMove1 00000138

Symbol: makeMove1



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 191 in file connect4.s
   Uses
      At line 182 in file connect4.s
      At line 197 in file connect4.s
      At line 199 in file connect4.s
      At line 212 in file connect4.s

makeMove2 00000190

Symbol: makeMove2
   Definitions
      At line 219 in file connect4.s
   Uses
      At line 215 in file connect4.s
Comment: makeMove2 used once
makeMove3 00000170

Symbol: makeMove3
   Definitions
      At line 209 in file connect4.s
   Uses
      At line 217 in file connect4.s
Comment: makeMove3 used once
str_go 00000328

Symbol: str_go
   Definitions
      At line 426 in file connect4.s
   Uses
      At line 50 in file connect4.s
Comment: str_go used once
str_header 00000341

Symbol: str_header
   Definitions
      At line 429 in file connect4.s
   Uses
      At line 123 in file connect4.s
Comment: str_header used once
str_newl 000003F7

Symbol: str_newl
   Definitions
      At line 445 in file connect4.s
   Uses
      At line 53 in file connect4.s
      At line 152 in file connect4.s

str_red_turn 00000355

Symbol: str_red_turn
   Definitions
      At line 432 in file connect4.s
   Uses
      At line 179 in file connect4.s
Comment: str_red_turn used once
str_red_win 000003D8




ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Symbol: str_red_win
   Definitions
      At line 438 in file connect4.s
   Uses
      At line 79 in file connect4.s
Comment: str_red_win used once
str_yellow_turn 00000395

Symbol: str_yellow_turn
   Definitions
      At line 435 in file connect4.s
   Uses
      At line 187 in file connect4.s
Comment: str_yellow_turn used once
str_yellow_win 000003E6

Symbol: str_yellow_win
   Definitions
      At line 441 in file connect4.s
   Uses
      At line 84 in file connect4.s
Comment: str_yellow_win used once
52 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COLUMNS 00000007

Symbol: COLUMNS
   Definitions
      At line 16 in file connect4.s
   Uses
      At line 137 in file connect4.s
Comment: COLUMNS used once
PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 360 in file connect4.s
Comment: PINSEL0 used once
ROWS 00000006

Symbol: ROWS
   Definitions
      At line 15 in file connect4.s
   Uses
      At line 130 in file connect4.s
Comment: ROWS used once
SPACES 0000002A

Symbol: SPACES
   Definitions
      At line 14 in file connect4.s
   Uses
      At line 32 in file connect4.s
      At line 105 in file connect4.s

U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 363 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 12 in file connect4.s
   Uses
      At line 376 in file connect4.s
      At line 392 in file connect4.s
      At line 398 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s
   Uses
      At line 380 in file connect4.s
Comment: U0RBR used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 396 in file connect4.s
Comment: U0THR used once
8 symbols
397 symbols in table
