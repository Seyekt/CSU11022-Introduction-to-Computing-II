


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 2 - Recursion
    4 00000000         ;
    5 00000000         
    6 00000000 0000000A 
                       N       EQU              10
    7 00000000         
    8 00000000                 AREA             globals, DATA, READWRITE
    9 00000000         
   10 00000000         ; N word-size values
   11 00000000         
   12 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       SORTED  SPACE            N*4         ; N words (4 bytes 
                                                            each)
   13 00000028         
   14 00000028         
   15 00000028                 AREA             RESET, CODE, READONLY
   16 00000000                 ENTRY
   17 00000000         
   18 00000000         ;
   19 00000000         ; copy the test data into RAM
   20 00000000         ;
   21 00000000         
   22 00000000 E59F40C0        LDR              R4, =SORTED
   23 00000004 E59F50C0        LDR              R5, =UNSORT
   24 00000008 E3A06000        LDR              R6, =0
   25 0000000C E356000A 
                       whInit  CMP              R6, #N
   26 00000010 2A000003        BHS              eWhInit
   27 00000014 E7957106        LDR              R7, [R5, R6, LSL #2]
   28 00000018 E7847106        STR              R7, [R4, R6, LSL #2]
   29 0000001C E2866001        ADD              R6, R6, #1
   30 00000020 EAFFFFF9        B                whInit
   31 00000024         eWhInit
   32 00000024         
   33 00000024         
   34 00000024         ;
   35 00000024         ; call your sort subroutine to test it
   36 00000024         ;
   37 00000024         
   38 00000024 E3A00101        LDR              R0, =0x40000000
   39 00000028 E3A0100A        MOV              R1, #N
   40 0000002C         
   41 0000002C         ;LDR R1, =3   ; Where we wish to take the first value an
                       d store the second
   42 0000002C         ;LDR R2, =6   ; Where we wish to store the firsT value a



ARM Macro Assembler    Page 2 


                       nd take the second
   43 0000002C         
   44 0000002C         
   45 0000002C EB000006        BL               SORT
   46 00000030         
   47 00000030 EAFFFFFE 
                       STOP    B                STOP
   48 00000034         
   49 00000034         
   50 00000034         ; SWAP subroutine
   51 00000034         ; Void stem function which swaps two elements in a one-d
                       imenesional array of word-sized integers
   52 00000034         ; Parameters:
   53 00000034         ;  R0: the starting address of the array
   54 00000034         ;  R1: i - the index of the first element to be swapped
   55 00000034         ;  R2: j - the index of the second element to be swapped
                       
   56 00000034         
   57 00000034 E92D4010 
                       SWAP    PUSH             {R4, LR}    ; save registers
   58 00000038         
   59 00000038 E7903101        LDR              R3, [R0, R1, LSL #2] ; load the
                                                             elemement at index
                                                             i into R3
   60 0000003C E7904102        LDR              R4, [R0, R2, LSL #2] ; load the
                                                             elemement at index
                                                             j into R4
   61 00000040         
   62 00000040 E7803102        STR              R3, [R0, R2, LSL #2] ; store th
                                                            e elemement at inde
                                                            x i at index j
   63 00000044 E7804101        STR              R4, [R0, R1, LSL #2] ; store th
                                                            e elemement at inde
                                                            x j at index i
   64 00000048         
   65 00000048 E8BD8010        POP              {R4, PC}    ; return
   66 0000004C         
   67 0000004C         ; SORT subroutine
   68 0000004C         ; Void leaf function which sorts all the elements of a o
                       ne-dimenesional array of word-sized integers
   69 0000004C         ; Parameters:
   70 0000004C         ;  R0: the starting address of the array
   71 0000004C         ;  R1: N - the length of the array in words
   72 0000004C         
   73 0000004C E92D4070 
                       SORT    PUSH             {R4-R6, LR} ; save registers
   74 00000050         
   75 00000050 E3A02000 
                       SORT0   MOV              R2, #0      ; boolean swapped =
                                                             false
   76 00000054         
   77 00000054 E3A03001        MOV              R3, #1      ; i = 1
   78 00000058 E1530001 
                       SORT1   CMP              R3, R1
   79 0000005C 2A00000C        BHS              SORT2
   80 00000060 E2833001        ADD              R3, R3, #1  ; i++
   81 00000064         
   82 00000064 E2434001        SUB              R4, R3, #1  ; i - 1 = i - 1
   83 00000068         



ARM Macro Assembler    Page 3 


   84 00000068 E7905103        LDR              R5, [R0, R3, LSL #2] ; i
   85 0000006C E7906104        LDR              R6, [R0, R4, LSL #2] ; i - 1
   86 00000070 E1560005        CMP              R6, R5      ; if ( array[i-1] >
                                                             array[i] ), swap 
   87 00000074 9A000005        BLS              SORT3       ; else
   88 00000078         
   89 00000078 E92D000E        PUSH             {R1-R3}
   90 0000007C E1A01004        MOV              R1, R4
   91 00000080 E1A02003        MOV              R2, R3
   92 00000084 EBFFFFEA        BL               SWAP        ;swap( array, i-1, 
                                                            i ) 
   93 00000088 E8BD000E        POP              {R1-R3}
   94 0000008C         
   95 0000008C E3A02001        MOV              R2, #1      ; swapped = true
   96 00000090         
   97 00000090 EAFFFFF0 
                       SORT3   B                SORT1
   98 00000094         
   99 00000094 E3520001 
                       SORT2   CMP              R2, #1      ; if swapped
  100 00000098 0AFFFFEC        BEQ              SORT0
  101 0000009C         
  102 0000009C E8BD8070        POP              {R4-R6, PC} ; return
  103 000000A0         
  104 000000A0 00000009 
              00000003 
              00000000 
              00000001 
              00000006 
              00000002 
              00000004 
              00000007 
              00000008 
              00000005 UNSORT  DCD              9,3,0,1,6,2,4,7,8,5
  105 000000C8         
  106 000000C8                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab2-recursion.d -o.\objects\lab2-recursion.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab2-recurs
ion.lst lab2-recursion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SORTED 00000000

Symbol: SORTED
   Definitions
      At line 12 in file lab2-recursion.s
   Uses
      At line 22 in file lab2-recursion.s
Comment: SORTED used once
globals 00000000

Symbol: globals
   Definitions
      At line 8 in file lab2-recursion.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 15 in file lab2-recursion.s
   Uses
      None
Comment: RESET unused
SORT 0000004C

Symbol: SORT
   Definitions
      At line 73 in file lab2-recursion.s
   Uses
      At line 45 in file lab2-recursion.s
Comment: SORT used once
SORT0 00000050

Symbol: SORT0
   Definitions
      At line 75 in file lab2-recursion.s
   Uses
      At line 100 in file lab2-recursion.s
Comment: SORT0 used once
SORT1 00000058

Symbol: SORT1
   Definitions
      At line 78 in file lab2-recursion.s
   Uses
      At line 97 in file lab2-recursion.s
Comment: SORT1 used once
SORT2 00000094

Symbol: SORT2
   Definitions
      At line 99 in file lab2-recursion.s
   Uses
      At line 79 in file lab2-recursion.s
Comment: SORT2 used once
SORT3 00000090

Symbol: SORT3
   Definitions
      At line 97 in file lab2-recursion.s
   Uses
      At line 87 in file lab2-recursion.s
Comment: SORT3 used once
STOP 00000030

Symbol: STOP
   Definitions
      At line 47 in file lab2-recursion.s
   Uses
      At line 47 in file lab2-recursion.s
Comment: STOP used once
SWAP 00000034

Symbol: SWAP



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 57 in file lab2-recursion.s
   Uses
      At line 92 in file lab2-recursion.s
Comment: SWAP used once
UNSORT 000000A0

Symbol: UNSORT
   Definitions
      At line 104 in file lab2-recursion.s
   Uses
      At line 23 in file lab2-recursion.s
Comment: UNSORT used once
eWhInit 00000024

Symbol: eWhInit
   Definitions
      At line 31 in file lab2-recursion.s
   Uses
      At line 26 in file lab2-recursion.s
Comment: eWhInit used once
whInit 0000000C

Symbol: whInit
   Definitions
      At line 25 in file lab2-recursion.s
   Uses
      At line 30 in file lab2-recursion.s
Comment: whInit used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 0000000A

Symbol: N
   Definitions
      At line 6 in file lab2-recursion.s
   Uses
      At line 12 in file lab2-recursion.s
      At line 25 in file lab2-recursion.s
      At line 39 in file lab2-recursion.s

1 symbol
348 symbols in table
