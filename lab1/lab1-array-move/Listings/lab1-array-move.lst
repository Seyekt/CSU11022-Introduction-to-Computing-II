


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Lab 1 - Array Move
    4 00000000         ;
    5 00000000         
    6 00000000 00000010 
                       N       EQU              16          ; number of element
                                                            s
    7 00000000         
    8 00000000                 AREA             globals, DATA, READWRITE
    9 00000000         
   10 00000000         ; N word-size values
   11 00000000         
   12 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       ARRAY   SPACE            N*4         ; N words
   13 00000040         
   14 00000040         
   15 00000040                 AREA             RESET, CODE, READONLY
   16 00000000                 ENTRY
   17 00000000         
   18 00000000         ; for convenience, let's initialise test array [0, 1, 2,
                        ... , N-1]
   19 00000000         
   20 00000000 E59F00BC        LDR              R0, =ARRAY
   21 00000004 E3A01000        LDR              R1, =0
   22 00000008 E3510010 
                       L1      CMP              R1, #N
   23 0000000C 2A000002        BHS              L2
   24 00000010 E7801101        STR              R1, [R0, R1, LSL #2]
   25 00000014 E2811001        ADD              R1, R1, #1
   26 00000018 EAFFFFFA        B                L1
   27 0000001C         L2
   28 0000001C         
   29 0000001C         ; the program goes here
   30 0000001C         
   31 0000001C E3A04000        MOV              R4, #0      ; R4 = 0 / Count
   32 00000020 E3A0A000        MOV              R10, #0     ; R10 = 0
   33 00000024 E1540001 
                       L3      CMP              R4, R1      ; CMP R4 w/ R1 



ARM Macro Assembler    Page 2 


   34 00000028 2A000005        BHS              L4          ; Is the count equa
                                                            l to the array? Whe
                                                            n it is finish
   35 0000002C E790500A        LDR              R5, [R0, R10] ; Load the (first
                                                            ) value from the ar
                                                            ray
   36 00000030 E0060595        MUL              R6, R5, R5  ; Square that value
                                                            
   37 00000034 E780600A        STR              R6, [R0, R10] ; Store that valu
                                                            e back and incremen
                                                            t to to next index 
                                                            (word up) to load n
                                                            ext value
   38 00000038 E2844001        ADD              R4, R4, #1  ; Increase count
   39 0000003C E28AA004        ADD              R10, R10, #4 ; Increase Word va
                                                            lue by word
   40 00000040 EAFFFFF7        B                L3          ; Repeat till finis
                                                            hed array
   41 00000044         L4
   42 00000044         
   43 00000044 E3A01003        LDR              R1, =3      ; Where we wish to 
                                                            take the first valu
                                                            e and store the sec
                                                            ond
   44 00000048 E3A02006        LDR              R2, =6      ; Where we wish to 
                                                            store the firs valu
                                                            e and take the seco
                                                            nd
   45 0000004C         
   46 0000004C E1510002        CMP              R1, R2
   47 00000050 BA00000D        BLT              L7
   48 00000054         
   49 00000054 E0415002        SUB              R5, R1, R2  ; R5 = Where we kno
                                                            w to end the count;
                                                             6 - 3 = 3
   50 00000058 E7904101        LDR              R4, [R0, R1, LSL #2] ; R4 = Loa
                                                            d the memory, move 
                                                            up to our first val
                                                            ue we take (6th), T
                                                            ake the first value
                                                            , store in register
                                                             
   51 0000005C E3A06000        MOV              R6, #0      ; R6 = Create count
                                                             = 0
   52 00000060 E1A09001        MOV              R9, R1      ; R9 = R1 for later
                                                             use
   53 00000064         
   54 00000064 E1560005 
                       L5      CMP              R6, R5      ; Compare counts
   55 00000068 0A000005        BEQ              L6          ; If equal, finish
   56 0000006C E2498001        SUB              R8, R9, #1  ; Move one place do
                                                            wn from first value
                                                             (i.e. index 5)
   57 00000070 E7907108        LDR              R7, [R0, R8, LSL #2] 
                                                            ; Load that value
   58 00000074 E7807109        STR              R7, [R0, R9, LSL #2] ; Store th
                                                            at value in one ind
                                                            ex above (i.e. inde
                                                            x 6)



ARM Macro Assembler    Page 3 


   59 00000078 E2499001        SUB              R9, R9, #1  ; Move first value 
                                                            down a place
   60 0000007C E2866001        ADD              R6, R6, #1  ; Increase count by
                                                             one
   61 00000080 EAFFFFF7        B                L5
   62 00000084         L6
   63 00000084 E7804101        STR              R4, [R0, R1, LSL #2] ; Store fi
                                                            rst value in second
                                                             position
   64 00000088         
   65 00000088 EA00000C        B                STOP
   66 0000008C         
   67 0000008C         
   68 0000008C E0425001 
                       L7      SUB              R5, R2, R1  ; R5 = Where we kno
                                                            w to end the count;
                                                             6 - 3 = 3
   69 00000090 E7904102        LDR              R4, [R0, R2, LSL #2] ; R4 = Loa
                                                            d the memory, move 
                                                            up to our first val
                                                            ue we take (6th), T
                                                            ake the first value
                                                            , store in register
                                                             
   70 00000094 E3A06000        MOV              R6, #0      ; R6 = Create count
                                                             = 0
   71 00000098 E1A09002        MOV              R9, R2      ; R9 = R1 for later
                                                             use
   72 0000009C         
   73 0000009C E1560005 
                       L8      CMP              R6, R5      ; Compare counts
   74 000000A0 0A000005        BEQ              L9          ; If equal, finish
   75 000000A4 E2898001        ADD              R8, R9, #1  ; Move one place do
                                                            wn from first value
                                                             (i.e. index 5)
   76 000000A8 E7107108        LDR              R7, [R0, -R8, LSL #2] 
                                                            ; Load that value
   77 000000AC E7007109        STR              R7, [R0, -R9, LSL #2] ; Store t
                                                            hat value in one in
                                                            dex above (i.e. ind
                                                            ex 6)
   78 000000B0 E2899001        ADD              R9, R9, #1  ; Move first value 
                                                            down a place
   79 000000B4 E2866001        ADD              R6, R6, #1  ; Increase count by
                                                             one
   80 000000B8 EAFFFFF7        B                L8
   81 000000BC         L9
   82 000000BC E7004101        STR              R4, [R0, -R1, LSL #2] ; Store f
                                                            irst value in secon
                                                            d position
   83 000000C0         
   84 000000C0         
   85 000000C0         
   86 000000C0 EAFFFFFE 
                       STOP    B                STOP
   87 000000C4         
   88 000000C4                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o



ARM Macro Assembler    Page 4 


bjects\lab1-array-move.d -o.\objects\lab1-array-move.o -IC:\Keil_v5\ARM\RV31\IN
C -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EV
AL SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\lab1-arra
y-move.lst lab1-array-move.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARRAY 00000000

Symbol: ARRAY
   Definitions
      At line 12 in file lab1-array-move.s
   Uses
      At line 20 in file lab1-array-move.s
Comment: ARRAY used once
globals 00000000

Symbol: globals
   Definitions
      At line 8 in file lab1-array-move.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

L1 00000008

Symbol: L1
   Definitions
      At line 22 in file lab1-array-move.s
   Uses
      At line 26 in file lab1-array-move.s
Comment: L1 used once
L2 0000001C

Symbol: L2
   Definitions
      At line 27 in file lab1-array-move.s
   Uses
      At line 23 in file lab1-array-move.s
Comment: L2 used once
L3 00000024

Symbol: L3
   Definitions
      At line 33 in file lab1-array-move.s
   Uses
      At line 40 in file lab1-array-move.s
Comment: L3 used once
L4 00000044

Symbol: L4
   Definitions
      At line 41 in file lab1-array-move.s
   Uses
      At line 34 in file lab1-array-move.s
Comment: L4 used once
L5 00000064

Symbol: L5
   Definitions
      At line 54 in file lab1-array-move.s
   Uses
      At line 61 in file lab1-array-move.s
Comment: L5 used once
L6 00000084

Symbol: L6
   Definitions
      At line 62 in file lab1-array-move.s
   Uses
      At line 55 in file lab1-array-move.s
Comment: L6 used once
L7 0000008C

Symbol: L7
   Definitions
      At line 68 in file lab1-array-move.s
   Uses
      At line 47 in file lab1-array-move.s
Comment: L7 used once
L8 0000009C

Symbol: L8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 73 in file lab1-array-move.s
   Uses
      At line 80 in file lab1-array-move.s
Comment: L8 used once
L9 000000BC

Symbol: L9
   Definitions
      At line 81 in file lab1-array-move.s
   Uses
      At line 74 in file lab1-array-move.s
Comment: L9 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 15 in file lab1-array-move.s
   Uses
      None
Comment: RESET unused
STOP 000000C0

Symbol: STOP
   Definitions
      At line 86 in file lab1-array-move.s
   Uses
      At line 65 in file lab1-array-move.s
      At line 86 in file lab1-array-move.s

11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 00000010

Symbol: N
   Definitions
      At line 6 in file lab1-array-move.s
   Uses
      At line 12 in file lab1-array-move.s
      At line 22 in file lab1-array-move.s

1 symbol
348 symbols in table
